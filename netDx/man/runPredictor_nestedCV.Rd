% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runPredictor_nestedCV.R,
%   R/runPredictor_nestedCV_forceNetSel.R
\name{runPredictor_nestedCV}
\alias{runPredictor_nestedCV}
\alias{runPredictor_nestedCV}
\title{Run nested cross-validation on data}
\usage{
runPredictor_nestedCV(pheno, dataList, groupList, outDir, makeNetFunc,
  nFoldCV = 10L, trainProp = 0.8, numSplits = 10L, numCores,
  CVmemory = 4L, CVcutoff = 9L, forceNetSelection = FALSE,
  keepAllData = FALSE, startAt = 1L, preFilter = FALSE)

runPredictor_nestedCV(pheno, dataList, groupList, outDir, makeNetFunc,
  nFoldCV = 10L, trainProp = 0.8, numSplits = 10L, numCores,
  CVmemory = 4L, CVcutoff = 9L, forceNetSelection = FALSE,
  keepAllData = FALSE, startAt = 1L, preFilter = FALSE)
}
\arguments{
\item{pheno}{(data.frame) sample metadata, must have ID and STATUS columns}

\item{dataList}{(list) keys are datatypes; values contain patient data
for the corresponding datatype. e.g. dataList[["rna"]] contains expression
matrix. Rows are units (e.g. genes, individual clinical variables) and 
columns are patients}

\item{groupList}{(list) keys are datatypes and values are lists indicating
how units for those datatypes are to be grouped. Keys must match those 
in dataList. Each entry of groupList[[k]] will generate a new PSN.
 e.g. groupList[["rna"]] could be a list of pathway definitions. 
So keys(groupList[["rna"]]) would have pathway names, generating one PSN
per pathways, and values(groupList[["rna"]]) would be genes that would be
grouped for the corresponding pathwayList.}

\item{outDir}{(char) directory where results will be stored. If this 
directory exists, its contents will be overwritten}

\item{makeNetFunc}{(function) user-defined function for creating the set
of input PSN provided to netDx. See createPSN_MultiData()::customFunc.}

\item{nFoldCV}{(integer) number of CV folds in inner loop}

\item{trainProp}{(numeric 0 to 1) Percent samples to use for training}

\item{numSplits}{(integer) number of train/blind test splits (i.e. iterations
of outer loop)}

\item{numCores}{(integer) number of CPU cores for parallel processing}

\item{CVmemory}{(integer) memory in (Gb) used for each fold of CV}

\item{CVcutoff}{(integer) cutoff for inner-fold CV to call feature-selected
in a given split}

\item{forceNetSelection}{(logical) if TRUE, ensures that, within a split,
a class has at least one network that passes feature selection. This option
is useful when a CVcutoff threshold (e.g. 9 out of 10) fails to select even
one network. At present performance is not evaluated for such a split (
i.e. performance is NA). Setting this flag to TRUE forces the network with
the highest score to be feature-selected (e.g. score of 8 or 5 or even 1).
The disadvantage is that performance could be worsened for this choice.}

\item{keepAllData}{(logical) if TRUE keeps all intermediate files, even
those not needed for assessing the predictor. Use very cautiously as for
some designs, each split can result in using 1Gb of data.}

\item{startAt}{(integer) which of the splits to start at (e.g. if the
job aborted part-way through)}

\item{preFilter}{(logical) if TRUE uses lasso to prefilter dataList within 
cross-validation loop. Only variables that pass lasso get included. The
current option is not recommended for pathway-level features as most genes
will be eliminated by lasso. Future variations may allow other prefiltering
options that are more lenient.}

\item{pheno}{(data.frame) sample metadata, must have ID and STATUS columns}

\item{dataList}{(list) keys are datatypes; values contain patient data
for the corresponding datatype. e.g. dataList[["rna"]] contains expression
matrix. Rows are units (e.g. genes, individual clinical variables) and 
columns are patients}

\item{groupList}{(list) keys are datatypes and values are lists indicating
how units for those datatypes are to be grouped. Keys must match those 
in dataList. Each entry of groupList[[k]] will generate a new PSN.
 e.g. groupList[["rna"]] could be a list of pathway definitions. 
So keys(groupList[["rna"]]) would have pathway names, generating one PSN
per pathways, and values(groupList[["rna"]]) would be genes that would be
grouped for the corresponding pathwayList.}

\item{makeNetFunc}{(function) user-defined function for creating the set
of input PSN provided to netDx. See createPSN_MultiData()::customFunc.}

\item{outDir}{(char) directory where results will be stored. If this 
directory exists, its contents will be overwritten}

\item{trainProp}{(numeric 0 to 1) Percent samples to use for training}

\item{nFoldCV}{(integer) number of CV folds in inner loop}

\item{numSplits}{(integer) number of train/blind test splits (i.e. iterations
of outer loop)}

\item{numCores}{(integer) number of CPU cores for parallel processing}

\item{CVmemory}{(integer) memory in (Gb) used for each fold of CV}

\item{CVcutoff}{(integer) cutoff for inner-fold CV to call feature-selected
in a given split}

\item{keepAllData}{(logical) if TRUE keeps all intermediate files, even
those not needed for assessing the predictor. Use very cautiously as for
some designs, each split can result in using 1Gb of data.}

\item{startAt}{(integer) which of the splits to start at (e.g. if the
job aborted part-way through)}

\item{preFilter}{(logical) if TRUE uses lasso to prefilter dataList within 
cross-validation loop. Only variables that pass lasso get included. The
current option is not recommended for pathway-level features as most genes
will be eliminated by lasso. Future variations may allow other prefiltering
options that are more lenient.}
}
\description{
Run nested cross-validation on data

Run nested cross-validation on data
}
\details{
wrapper function to run netDx with nested cross-validation, 
with an inner loop of X-fold cross-validation and an outer loop of different
random splits of data into train and blind test. The user needs to supply
a custom function to create PSN, see createPSN_MultiData(). This wrapper
provides flexibility for designs with one or several heterogeneous data
types, and one or more ways of defining patient similarity. 
For example, designs it handles includes
1) Single datatype, single similarity metric: Expression data -> pathways
2) Single datatype, multiple metrics: Expression data -> pathways
(Pearson corr) and single gene networks (normalized difference)
3) Multiple datatypes, multiple metrics: Expression -> Pathways; 
Clinical -> single or grouped nets
See examples/NestedCV_MultiData.Rmd for a full working example.

wrapper function to run netDx with nested cross-validation, 
with an inner loop of X-fold cross-validation and an outer loop of different
random splits of data into train and blind test. The user needs to supply
a custom function to create PSN, see createPSN_MultiData(). This wrapper
provides flexibility for designs with one or several heterogeneous data
types, and one or more ways of defining patient similarity. 
For example, designs it handles includes
1) Single datatype, single similarity metric: Expression data -> pathways
2) Single datatype, multiple metrics: Expression data -> pathways
(Pearson corr) and single gene networks (normalized difference)
3) Multiple datatypes, multiple metrics: Expression -> Pathways; 
Clinical -> single or grouped nets
See examples/NestedCV_MultiData.Rmd for a full working example.
}
\examples{
see examples/NestedCV_MultiData.Rmd for example use.
see examples/NestedCV_MultiData.Rmd for example use.
}
