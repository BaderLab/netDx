\documentclass{article}

\begin{document}

<<include=FALSE>>=
library(knitr)
opts_chunk$set(
concordance=TRUE
)
@


\title{netDx use case: 4-way classification: Medulloblastoma tumour subtype}
\author{Shraddha Pai}
\date{Last updated: 3 December, 2018}

\maketitle

\section{Introduction}
Northcott et al. (2011) identified four subtypes of primary medulloblastoma tumours based on gene expression profiles, each predictable by levels of ~5 genes (Ref 1). For each tumour, we have gene-level expression data (GSE21140) from the Affymetrix Human Exon 1.0 ST array (gene-level). In this application, our goal is to classify a new tumour into one of the 4 subtypes.
\par
The netDx workflow is shown in Figure 1. We use gene signatures identified by previous research and omit the feature selection step. Instead, GeneMANIA (GM) is used to predict tumour labels. For each of the 4 subtypes, we construct a GM database that contains genes part of the corresponding gene signature. Samples from each subtype are split into training (70\%) and test (30\%). One query is run for each of the four subtypes, using the training samples for the corresponding subtypes as a query. In this way, each test sample is ranked by all 4 databases. After test samples have been ranked by all four GeneMANIA queries , each set of ranks is normalized to range between 0 and 1.  The patient is assigned to the class with the highest rank.

\begin{figure}[ht]
\begin{center}
\includegraphics[width=\textwidth]{images/mblastoma.png}
\caption{netDx workflow for a 4-way classification of medulloblastoma tumour from known gene signatures. \newline A. A GeneMANIA database is built for each subtype. The networks are at the gene-level, with a custom similarity metric (see Section 3); each subtype-specific database contains networks for the genes in the corresponding subtype signature. The networks and database contain all training and test patients. \newline B. A sample is classified by running four GeneMANIA queries, one per subtype. In each case, the query comprises of training samples for that subtype. The query results in subtype-specific similarity ranking. After such ranks have been obtained for all four subtypes, the sample is assigned to the class for which it has the highest rank.}
\end{center}
\end{figure}

\section{Set up}
\subsection{Set up working environment}
<<eval=TRUE>>=
outDir <-  sprintf("%s/MB",getwd())
if (file.exists(outDir)) unlink(outDir,recursive=TRUE)
dir.create(outDir)

numCores    <- 2L	# number of cores for parallel processing
pctTrain    <- 0.7	# fraction of samples to use for feature selection

require(netDx)
require(netDx.examples)
@

Load the example data
<<eval=TRUE>>=
# Load the Medulloblastoma dataset
data(MBlastoma)
@

\subsection{Define gene signatures}

<<eval=TRUE>>=
# subtypes and genes predictive of these. From Table 1 of PMC3306784
# http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3306784/table/Tab1/
groupSig <- list(
    WNT=c("WIF1","TNC","GAD","DKK2","EMX2"),
    SHH=c("PDLIM3","EYA1","HHIP","ATOH1","SFRP1"),
    Group3=c("IMPG2","GABRA5","EGFL11","NRL","MAB21L2","NPR3"),
    Group4=c("KCNA1","EOMES","KHDRBS2","RBM24","UNC5D","OAS1")
)
@

\subsection{Split samples into train and test}

For this example we manually separate samples from each of the 4 subtypes into 70\% training and 30\% test
<<eval=TRUE>>=
# ---------------------------------------------
# split dataset into train/test in group-wise manner. Note that we 
# include patients not in any particular group because they serve
# as negatives
set.seed(42) # make reproducible
TT_STATUS <- character(nrow(MB.pheno))
for (g in unique(MB.pheno$STATUS)) {
    idx <- which(MB.pheno$STATUS %in% g)
    status <- rep("TEST",length(idx))
    status[1:(floor(pctTrain * length(idx)))] <- "TRAIN"
    TT_STATUS[idx] <- sample(status, replace=FALSE) # scramble
}
MB.pheno <- cbind(MB.pheno, TT_STATUS=TT_STATUS)
@

\section{Build predictor for each subtype}
In this example, we skip feature selection and move straight to predicting subtypes for test tumours, based on similarity to training samples.

<<eval=TRUE>>=
MB.pheno_train <- subset(MB.pheno, TT_STATUS %in% "TRAIN")
@

For each subtype, we build a GeneMANIA database consisting of features for that subtype.  Each database contains all 103 samples. Features are at the levels of genes. The similarity measure is a custom-defined one, here seen in the \texttt{geneSim()} function.

<<eval=TRUE>>=
# custom similarity measure
geneSim <- function(x) {
    if (nrow(x)>=1) x <- x[1,]
    nm <- colnames(x)
    x <- as.numeric(x)
    n <- length(x)
    rngX  <- max(x)-min(x)
    
    out <- matrix(NA,nrow=n,ncol=n);
    # weight between i and j is
    # wt(i,j) = 1 - (abs(g[i]-g[j])/(max(g)-min(g)))
    # where g is the eMB.xpression vector for each gene
    for (j in 1:n) out[,j] <- 1-(abs((x-x[j])/rngX))
    rownames(out) <- nm; colnames(out)<- nm
    out
}
@

For each subtype, the loop combines the following steps:
\begin{itemize}
\item \texttt{makePSN\_NamedMatrix()}: Function that creates the patient networks from the expression vector. Here we supply the custom similarity-computing function via the \texttt{customFunc} argument. The interaction networks are written in the directory \texttt{netDir}.
\item \texttt{GM\_createDB()}: All the input networks in \texttt{netDir} are integrated into a single GeneMANIA database.
\item \texttt{GM\_writeQueryFile()}: Write a GeneMANIA query file; the GeneMANIA query will obtain a similarity ranking for test patients
\item \texttt{runGeneMANIA()}: Runs a GeneMANIA query
\item \texttt{GM\_getQueryROC()}: Process the patient ranking output file (the \texttt{.prank} file)
\end{itemize}

<<eval=TRUE>>=
# directories with group-specific predictors
predRes <- list()
## for each subtype
for (g in names(groupSig)){
    pDir <- sprintf("%s/%s",outDir,g)
    dir.create(pDir)
    
    # each gene has its own PSN
    sigNets <- list()
    for (g2 in groupSig[[g]]) sigNets[[g2]] <- g2
    
    # create patient networks using train & test samples
    # networks are limited to signature genes for this subtype
    idx     <- which(MB.xpr_names %in% groupSig[[g]])
    cat(sprintf("Subtype : %s { %s } => %i measures\n",
                g, paste(groupSig[[g]],collapse=","), length(idx)))
    netDir  <- sprintf("%s/networks",pDir)
    
    # this function call creates the PSN
    netList <- makePSN_NamedMatrix(MB.xpr[idx,], MB.xpr_names[idx], 
                                   sigNets,netDir,
                                   simMetric="custom",customFunc=geneSim,
								   writeProfiles=FALSE,sparsify=TRUE,
                                   verbose=TRUE)
    
    # create a GeneMANIA database out of these networks
    dbDir <- GM_createDB(netDir, MB.pheno$ID, pDir)
    
    # run a query using training samples for this subtype.
    # get ranking for all patients in the database by running GeneMANIA
    trainSamps <- MB.pheno$ID[which(MB.pheno$TT_STATUS %in% "TRAIN" 
		& MB.pheno$STATUS %in% g)]
    qFile      <- sprintf("%s/query.txt", pDir)
    GM_writeQueryFile(trainSamps, "all", nrow(MB.pheno),qFile)
    resFile <- runGeneMANIA(dbDir$dbDir, qFile, pDir)
    
    # compute ROC curve for each predictor
    predRes[[g]] <- GM_getQueryROC(sprintf("%s.PRANK",resFile),
            MB.pheno, g)
}
@

\section{Evaluate performance}
Once we have run GeneMANIA on all 4 subclasses, the patient gets assigned to the class for which it has the highest ranking.

Take a look at the ROC curves.
<<eval=TRUE>>=
par(mfrow=c(2,2))
tmp <- sapply(names(predRes), function(nm){
    x <- predRes[[nm]]
    plot(x$roc,
         main=sprintf("%s: N=%i (AUC=%1.3f)",
                      nm,length(x$roc@x.values[[1]]),x$auc),
         cex.main=0.8)
    })

save(predRes,file=sprintf("%s/predictions.Rdata",outDir))
@


Finally, predict the class of each test sample
<<eval=TRUE>>=
predClass 	<- GM_OneVAll_getClass(predRes)
testSamps 	<- merge(x=MB.pheno,y=predClass,by="ID")
testSamps	<- testSamps[-which(!testSamps$STATUS %in% c("WNT","SHH",
				"Group3","Group4")),]
@

Compute class match accuracy
<<eval=TRUE>>=
rightClass <- testSamps$STATUS == testSamps$PRED_CLASS
numCor <- sum(rightClass); ln <- nrow(testSamps)
cat(sprintf("Overall classifier accuracy = %i of %i  (%i%%)",
            numCor, ln, round((numCor/ln)*100)))
@

Examine class-specific accuracy:
<<eval=TRUE>>=
for (g in names(groupSig)){
    idx <- which(testSamps$STATUS %in% g)
    numCor <- sum(rightClass[idx]); ln <- length(idx)
    cat(sprintf("\t%s = %i of %i  (%i%%)\n",
            g, numCor, ln, round((numCor/ln)*100)))
}
@

\section{sessionInfo}
<<eval=TRUE>>=
sessionInfo()
@

\section{References}
1. Northcott PA et al. (2011). J Clin Oncol. 29 (11):1408.
\end{document}
